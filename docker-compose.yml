version: '3.8'

services:
  # Database
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-licitrix}
      POSTGRES_USER: ${POSTGRES_USER:-licitrix}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-licitrix}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-licitrix}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  api:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - POSTGRES_HOST=db
      - REDIS_HOST=redis
    env_file:
      - env.example
    volumes:
      - ./apps/backend:/app
      - ./packages/shared:/shared
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    command: celery -A core worker -l info
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - POSTGRES_HOST=db
      - REDIS_HOST=redis
    env_file:
      - env.example
    volumes:
      - ./apps/backend:/app
      - ./packages/shared:/shared
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    command: celery -A core beat -l info
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - POSTGRES_HOST=db
      - REDIS_HOST=redis
    env_file:
      - env.example
    volumes:
      - ./apps/backend:/app
      - ./packages/shared:/shared
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Frontend Web
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - api

  # Traefik (Reverse Proxy)
  traefik:
    image: traefik:v2.10
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.api.address=:8080
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infra/docker/traefik/traefik.yml:/etc/traefik/traefik.yml:ro

  # MailHog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"
      - "8025:8025"

  # Feature Flags
  unleash:
    image: unleashorg/unleash-server:5.0.0
    environment:
      - DATABASE_URL=postgresql://licitrix:licitrix@db:5432/unleash
      - UNLEASH_SECRET=unleash-secret-key
    ports:
      - "4242:4242"
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
